{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import json\n",
    "import requests\n",
    "import yfinance as yf\n",
    "import psycopg2\n",
    "from sqlalchemy import create_engine\n",
    "from config import postgres_pass\n",
    "from sqlalchemy.sql import text\n",
    "from sklearn.preprocessing import StandardScaler,OneHotEncoder, MinMaxScaler\n",
    "import joblib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Connect to PostgreSQL\n",
    "conn = psycopg2.connect(host=\"localhost\", port = 5432, database=\"final_project\", user=\"postgres\", password=postgres_pass)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "db_string = f\"postgresql://postgres:{postgres_pass}@127.0.0.1:5432/final_project\"\n",
    "engine = create_engine(db_string) \n",
    "# Create a cursor object\n",
    "cur = conn.cursor()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Select Ticker\n",
    "ticker = 'xyl'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tick</th>\n",
       "      <th>class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>a</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>aa</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>aapl</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>abt</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ace</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>429</th>\n",
       "      <td>xyl</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>430</th>\n",
       "      <td>yhoo</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>431</th>\n",
       "      <td>yum</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>432</th>\n",
       "      <td>zlc</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>433</th>\n",
       "      <td>znga</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>434 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     tick  class\n",
       "0       a      5\n",
       "1      aa      4\n",
       "2    aapl      4\n",
       "3     abt      4\n",
       "4     ace      1\n",
       "..    ...    ...\n",
       "429   xyl      0\n",
       "430  yhoo      5\n",
       "431   yum      2\n",
       "432   zlc      0\n",
       "433  znga      0\n",
       "\n",
       "[434 rows x 2 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a DF for the Symbol Name Table (CSV)\n",
    "class_df=pd.read_csv('Resources/ticker_clusters.csv', index_col=False, names=['tick', 'class'], header=0)\n",
    "class_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a new Table for Clusters in Posgres\n",
    "class_df.to_sql(name='clusters', con=engine, if_exists='replace', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'zip': '10573',\n",
       " 'sector': 'Industrials',\n",
       " 'fullTimeEmployees': 17000,\n",
       " 'longBusinessSummary': 'Xylem Inc., together with its subsidiaries, engages in the design, manufacture, and servicing of engineered products and solutions for the water and wastewater applications in the United States, Europe, the Asia Pacific, and internationally. It operates in three segments: Water Infrastructure, Applied Water, and Measurement & Control Solutions. The Water Infrastructure segment offers various products, including water and wastewater pumps; controls and systems; filtration, disinfection, and biological treatment equipment; and mobile dewatering equipment under the Flygt, Godwin, Wedeco, Sanitaire, and Leopold names for the transportation and treatment of water. The Applied Water segment provides pumps, valves, heat exchangers, controls, and dispensing equipment systems under the Goulds Water Technology, Bell & Gossett, A-C Fire Pump, Standard Xchange, Lowara, Jabsco, and Flojet brand names for residential and commercial building services, and industrial water applications. The Measurement & Control Solutions segment provides smart metering, networked communications, and measurement and control technologies, as well as critical infrastructure technologies that allow customers to use their distribution networks for the delivery, monitoring, and control of critical resources, such as water, electricity, and natural gas. It also offers software and services, including cloud-based analytics, remote monitoring, data management and analytics, leak detection, condition assessment, asset management, and pressure monitoring solutions, as well as testing equipment and managed services. This segment sells its products under the BLU-X, Pure, Sensus, Smith Blair, WTW, and YSI brand names. The company markets and sells its products through a network of direct sales force, resellers, distributors, and value-added solution providers. Xylem Inc. is headquartered in Rye Brook, New York.',\n",
       " 'city': 'Rye Brook',\n",
       " 'phone': '914 323 5700',\n",
       " 'state': 'NY',\n",
       " 'country': 'United States',\n",
       " 'companyOfficers': [],\n",
       " 'website': 'https://www.xylem.com',\n",
       " 'maxAge': 1,\n",
       " 'address1': '1 International Drive',\n",
       " 'industry': 'Specialty Industrial Machinery',\n",
       " 'ebitdaMargins': 0.16112,\n",
       " 'profitMargins': 0.08219,\n",
       " 'grossMargins': 0.38017,\n",
       " 'operatingCashflow': 538000000,\n",
       " 'revenueGrowth': -0.036,\n",
       " 'operatingMargins': 0.11396,\n",
       " 'ebitda': 837000000,\n",
       " 'targetLowPrice': 75,\n",
       " 'recommendationKey': 'hold',\n",
       " 'grossProfits': 1975000000,\n",
       " 'freeCashflow': 327500000,\n",
       " 'targetMedianPrice': 99,\n",
       " 'currentPrice': 90.66,\n",
       " 'earningsGrowth': -0.24,\n",
       " 'currentRatio': 2.272,\n",
       " 'returnOnAssets': 0.04346,\n",
       " 'numberOfAnalystOpinions': 13,\n",
       " 'targetMeanPrice': 103.15,\n",
       " 'debtToEquity': 75.635,\n",
       " 'returnOnEquity': 0.1377,\n",
       " 'targetHighPrice': 130,\n",
       " 'totalCash': 1348999936,\n",
       " 'totalDebt': 2440000000,\n",
       " 'totalRevenue': 5194999808,\n",
       " 'totalCashPerShare': 7.478,\n",
       " 'financialCurrency': 'USD',\n",
       " 'revenuePerShare': 28.829,\n",
       " 'quickRatio': 1.655,\n",
       " 'recommendationMean': 2.9,\n",
       " 'exchange': 'NYQ',\n",
       " 'shortName': 'Xylem Inc.',\n",
       " 'longName': 'Xylem Inc.',\n",
       " 'exchangeTimezoneName': 'America/New_York',\n",
       " 'exchangeTimezoneShortName': 'EST',\n",
       " 'isEsgPopulated': False,\n",
       " 'gmtOffSetMilliseconds': '-18000000',\n",
       " 'quoteType': 'EQUITY',\n",
       " 'symbol': 'XYL',\n",
       " 'messageBoardId': 'finmb_118218449',\n",
       " 'market': 'us_market',\n",
       " 'annualHoldingsTurnover': None,\n",
       " 'enterpriseToRevenue': 3.36,\n",
       " 'beta3Year': None,\n",
       " 'enterpriseToEbitda': 20.853,\n",
       " '52WeekChange': -0.088661015,\n",
       " 'morningStarRiskRating': None,\n",
       " 'forwardEps': 3.28,\n",
       " 'revenueQuarterlyGrowth': None,\n",
       " 'sharesOutstanding': 180400000,\n",
       " 'fundInceptionDate': None,\n",
       " 'annualReportExpenseRatio': None,\n",
       " 'totalAssets': None,\n",
       " 'bookValue': 17.838,\n",
       " 'sharesShort': 3969171,\n",
       " 'sharesPercentSharesOut': 0.022,\n",
       " 'fundFamily': None,\n",
       " 'lastFiscalYearEnd': 1640908800,\n",
       " 'heldPercentInstitutions': 0.91310996,\n",
       " 'netIncomeToCommon': 427000000,\n",
       " 'trailingEps': 2.35,\n",
       " 'lastDividendValue': 0.3,\n",
       " 'SandP52WeekChange': 0.12185478,\n",
       " 'priceToBook': 5.082409,\n",
       " 'heldPercentInsiders': 0.0092400005,\n",
       " 'nextFiscalYearEnd': 1703980800,\n",
       " 'yield': None,\n",
       " 'mostRecentQuarter': 1640908800,\n",
       " 'shortRatio': 3.1,\n",
       " 'sharesShortPreviousMonthDate': 1640908800,\n",
       " 'floatShares': 179685616,\n",
       " 'beta': 1.070114,\n",
       " 'enterpriseValue': 17454063616,\n",
       " 'priceHint': 2,\n",
       " 'threeYearAverageReturn': None,\n",
       " 'lastSplitDate': None,\n",
       " 'lastSplitFactor': None,\n",
       " 'legalType': None,\n",
       " 'lastDividendDate': 1644969600,\n",
       " 'morningStarOverallRating': None,\n",
       " 'earningsQuarterlyGrowth': -0.236,\n",
       " 'priceToSalesTrailing12Months': 3.148232,\n",
       " 'dateShortInterest': 1643587200,\n",
       " 'pegRatio': 1.86,\n",
       " 'ytdReturn': None,\n",
       " 'forwardPE': 27.640245,\n",
       " 'lastCapGain': None,\n",
       " 'shortPercentOfFloat': 0.0279,\n",
       " 'sharesShortPriorMonth': 3305289,\n",
       " 'impliedSharesOutstanding': 0,\n",
       " 'category': None,\n",
       " 'fiveYearAverageReturn': None,\n",
       " 'previousClose': 89.81,\n",
       " 'regularMarketOpen': 89.81,\n",
       " 'twoHundredDayAverage': 120.7058,\n",
       " 'trailingAnnualDividendYield': 0.012470772,\n",
       " 'payoutRatio': 0.4766,\n",
       " 'volume24Hr': None,\n",
       " 'regularMarketDayHigh': 91.03,\n",
       " 'navPrice': None,\n",
       " 'averageDailyVolume10Day': 1359340,\n",
       " 'regularMarketPreviousClose': 89.81,\n",
       " 'fiftyDayAverage': 108.1942,\n",
       " 'trailingAnnualDividendRate': 1.12,\n",
       " 'open': 89.81,\n",
       " 'toCurrency': None,\n",
       " 'averageVolume10days': 1359340,\n",
       " 'expireDate': None,\n",
       " 'algorithm': None,\n",
       " 'dividendRate': 1.2,\n",
       " 'exDividendDate': 1644969600,\n",
       " 'circulatingSupply': None,\n",
       " 'startDate': None,\n",
       " 'regularMarketDayLow': 89.46,\n",
       " 'currency': 'USD',\n",
       " 'trailingPE': 38.578728,\n",
       " 'regularMarketVolume': 1361533,\n",
       " 'lastMarket': None,\n",
       " 'maxSupply': None,\n",
       " 'openInterest': None,\n",
       " 'marketCap': 16355064832,\n",
       " 'volumeAllCurrencies': None,\n",
       " 'strikePrice': None,\n",
       " 'averageVolume': 1277141,\n",
       " 'dayLow': 89.46,\n",
       " 'ask': 90.74,\n",
       " 'askSize': 900,\n",
       " 'volume': 1361533,\n",
       " 'fiftyTwoWeekHigh': 138.78,\n",
       " 'fromCurrency': None,\n",
       " 'fiveYearAvgDividendYield': 1.13,\n",
       " 'fiftyTwoWeekLow': 87.44,\n",
       " 'bid': 84.7,\n",
       " 'tradeable': False,\n",
       " 'dividendYield': 0.013200001,\n",
       " 'bidSize': 900,\n",
       " 'dayHigh': 91.03,\n",
       " 'regularMarketPrice': 90.66,\n",
       " 'preMarketPrice': None,\n",
       " 'logo_url': 'https://logo.clearbit.com/xylem.com',\n",
       " 'trailingPegRatio': 2.4447}"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# pull Ticker details from Yahoo Finance\n",
    "ticker_dict = yf.Ticker(ticker)\n",
    "\n",
    "#test if Ticker is real, if not -> display ADBE\n",
    "if len(ticker_dict.info.keys())<5:\n",
    "    ticker_dict = yf.Ticker('adbe')\n",
    "    \n",
    "t_info = ticker_dict.info\n",
    "t_info"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    xyl\n",
       "Name: symbol, dtype: object"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Get Ticker Features and lower case for column names\n",
    "tick_df = pd.DataFrame(list(t_info.items()))\n",
    "tick_df = tick_df.transpose()\n",
    "new_header = tick_df.iloc[0] \n",
    "\n",
    "for i in range(len(new_header)):\n",
    "    new_header[i] = new_header[i].lower()\n",
    "#new_header\n",
    "tick_df = tick_df[1:] \n",
    "tick_df.columns = new_header\n",
    "#print(new_header.to_list())\n",
    "#tick_df = tick_df._slice(slice(0, 1))\n",
    "#tick_df = tick_df[active_col]\n",
    "tick_df['symbol'] = tick_df['symbol'].str.lower()\n",
    "tick_df.symbol"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Selected Ticker to Postgres\n",
    "tick_df.to_sql(name='tickerr', con=engine, if_exists='replace')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query the Feature data for Clusters Table\n",
    "#Joining tickerr table and clusters table by column 'class'\n",
    "cur = conn.cursor()\n",
    "cur.execute(\"DROP TABLE IF EXISTS ticker;\")\n",
    "cur.execute(\"SELECT t.*, c.class INTO ticker FROM tickerr t LEFT JOIN clusters c ON t.symbol = c.tick;\") \n",
    "conn.commit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[75.635, 38.578728, 3.148232, 5.082409, 0.08219, 0.11396, 0.04346, 0.1377, 28.829, 27.640245, 1.86, 3.36, 20.853, 1975000000.0, 3.28, -0.24, -0.036, 7.478, 2.272, 17.838, 538000000.0, 1.070114, 0.0]\n"
     ]
    }
   ],
   "source": [
    "#Query the Feature data for DL Model\n",
    "cur = conn.cursor()\n",
    "cur.execute(\"\"\"SELECT debttoequity, trailingpe, pricetosalestrailing12months, \n",
    "pricetobook, profitmargins, operatingmargins, returnonassets, returnonequity, \n",
    "revenuepershare, forwardpe, pegratio, enterprisetorevenue, enterprisetoebitda, \n",
    "grossprofits, forwardeps, earningsgrowth, revenuegrowth, totalcashpershare, \n",
    "currentratio, bookvalue, operatingcashflow, beta, class\n",
    "FROM ticker;\"\"\")      \n",
    "\n",
    "query_results = list(np.asarray(cur.fetchall()[0]))\n",
    "print(query_results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[75.635,\n",
       " 38.578728,\n",
       " 3.148232,\n",
       " 5.082409,\n",
       " 0.08219,\n",
       " 0.11396,\n",
       " 0.04346,\n",
       " 0.1377,\n",
       " 28.829,\n",
       " 27.640245,\n",
       " 1.86,\n",
       " 3.36,\n",
       " 20.853,\n",
       " 1975000000.0,\n",
       " 3.28,\n",
       " -0.24,\n",
       " -0.036,\n",
       " 7.478,\n",
       " 2.272,\n",
       " 17.838,\n",
       " 538000000.0,\n",
       " 1.070114,\n",
       " 0.0]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for i in range(len(query_results)-1):\n",
    "    if query_results[i] == None:\n",
    "        query_results[i] =0\n",
    "    if i == len(query_results)-1:\n",
    "        if query_results[i+1] == None:\n",
    "            query_results[i+1] =6 # If the stock does not belong to any cluster\n",
    "query_results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the Saved Model\n",
    "#from tensorflow \n",
    "import keras\n",
    "model_num = int(query_results[-1])\n",
    "query_results = query_results[:-1]\n",
    "\n",
    "nn = keras.models.load_model(f\"Model/Stock_Optimization_Class_{model_num}.h5\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Accuracy Calc\n",
    "if model_num == 0:\n",
    "    model_accuracy = 'Medium'\n",
    "elif model_num == 1:\n",
    "    model_accuracy = 'Medium'\n",
    "elif model_num == 2:\n",
    "    model_accuracy = 'High'\n",
    "elif model_num == 3:\n",
    "    model_accuracy = 'Very High'\n",
    "elif model_num == 4:\n",
    "    model_accuracy = 'Medium'\n",
    "elif model_num == 5:\n",
    "    model_accuracy = 'Medium'\n",
    "else:\n",
    "    model_accuracy = 'Low'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
<<<<<<< HEAD
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 0s 125ms/step\n"
     ]
    },
    {
=======
>>>>>>> 381b1f27a5f00ffe62d5982e0e26ba7c37c75de0
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>predictedprice</th>\n",
       "      <th>accuracy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>100.053474</td>\n",
       "      <td>Medium</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   predictedprice accuracy\n",
       "0      100.053474   Medium"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Run the model to predict Stock Price\n",
    "query_results = np.array(query_results).reshape(-1,1)\n",
    "query_results = query_results.transpose()\n",
    "query_results.shape\n",
    "\n",
    "# Load the Scaler\n",
    "X_scaler = joblib.load(f'Model/Stock_Scaler_Class_{model_num}.gz')\n",
    "query_scaled = X_scaler.transform(query_results) \n",
    "\n",
    "predicted_price = pd.DataFrame(data=nn.predict(query_scaled), columns=['predictedprice'], index=None)\n",
    "predicted_price['accuracy'] = model_accuracy\n",
    "predicted_price"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Save Predicted Price to Postgres\n",
    "#Selected Ticker to Postgres\n",
    "predicted_price.to_sql(name='predicted_price', con=engine, if_exists='replace', index = None)"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Medium'"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predicted_price_df = pd.read_sql_table('predicted_price', db_string)\n",
    "predicted_accuracy = predicted_price_df.accuracy[0]\n",
    "predicted_accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
=======
   "execution_count": 17,
>>>>>>> 381b1f27a5f00ffe62d5982e0e26ba7c37c75de0
   "metadata": {},
   "outputs": [],
   "source": [
    "# Close the cursor and connection to so the server can allocate\n",
    "# bandwidth to other requests\n",
    "cur.close()\n",
    "conn.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "mlenv",
   "language": "python",
   "name": "mlenv"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
